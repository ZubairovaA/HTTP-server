#include <iostream>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <sstream>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <fcntl.h>
#include "server_answer.h"


void error(const char *msg)
{
    perror(msg);
    exit(1);
}



int main(int argc, char *argv[])
{
     int sockfd, newsockfd, portno, pid;
     socklen_t clilen;
     struct sockaddr_in serv_addr, cli_addr;
     ServerAnswer server;

     sockfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sockfd < 0)
     {
         error("ERROR opening socket");
         exit(1);
     }
     fcntl(sockfd, F_SETFL, O_NONBLOCK);
     bzero((char *) &serv_addr, sizeof(serv_addr));
     portno = 45000;
     serv_addr.sin_family = AF_INET;
     serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
     serv_addr.sin_port = htons(portno);
     if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
     {
         error("ERROR on binding");
         exit(1);
     }
     listen(sockfd,5);
     clilen = sizeof(cli_addr);
     set<int> clients;
     clients.clear();

     while (1)
     {
         fd_set readset;
                 FD_ZERO(&readset);
                 FD_SET(sockfd, &readset);

                 for(set<int>::iterator it = clients.begin(); it != clients.end(); it++)
                     FD_SET(*it, &readset);
                 timeval timeout;
                         timeout.tv_sec = 15;
                         timeout.tv_usec = 0;

                         // Ждём события в одном из сокетов
                         int mx = max(sockfd, *max_element(clients.begin(), clients.end()));
                         if(select(mx+1, &readset, NULL, NULL, &timeout) <= 0)
                         {
                             perror("select");
                             exit(3);
                         }

         newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
         if (newsockfd < 0)
         {
             error("ERROR on accept");
             exit(1);
         }
         pid = fork();
         if (pid < 0)
         {

             error("ERROR on fork");
             exit(1);
         }
         if (pid == 0)
         {
             server.HandleRequest(newsockfd);
         }
         else close(newsockfd);
     } /* end of while */
     close(sockfd);
     return 0;
}
